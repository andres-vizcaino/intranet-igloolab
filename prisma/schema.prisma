// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  profile       Profile?
  tweets        Tweet[]
  posts         Post[]
  tweetsLike    Tweet[]        @relation("likes")
  boards        Board[]
  Pet           Pet[]
  CongratCreate Congrat[]      @relation("congratCreate")
  CongratRecive Congrat[]      @relation("congratReceive")
  Comment       Comment[]
  petsLike      Pet[]          @relation("likesPet")
  postCreative  PostCreative[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id          Int       @id @default(autoincrement())
  bio         String
  birthday    DateTime?
  amoramistad Boolean?  @default(false)
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @unique
}

model Tweet {
  id        Int       @id @default(autoincrement())
  body      String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @map("updated_at")
  author    User      @relation(fields: [userId], references: [id])
  userId    String
  likesBy   User[]    @relation("likes")
  Comment   Comment[]

  @@map("tweets")
}

model Comment {
  id        Int      @id @default(autoincrement())
  body      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  author    User     @relation(fields: [userId], references: [id])
  userId    String
  tweet     Tweet    @relation(fields: [tweetId], references: [id])
  tweetId   Int
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  slug      String   @unique
  content   String?
  createdAt DateTime @default(now()) @map("created_at")
  published Boolean  @default(false)
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String

  @@map("posts")
}

model Board {
  id          String        @id @default(cuid())
  name        String
  description String?
  author      User          @relation(fields: [authorId], references: [id])
  authorId    String
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("update_at")
  columns     ColumnBoard[]

  @@map("boards")
}

model ColumnBoard {
  id        String       @id @default(cuid())
  title     String
  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime     @updatedAt @map("update_at")
  items     ItemColumn[]
  boardId   String
  board     Board        @relation(fields: [boardId], references: [id], onDelete: Cascade)

  @@map("columns_board")
}

model ItemColumn {
  id            String      @id @default(cuid())
  description   String
  columnBoardId String
  columnBoard   ColumnBoard @relation(fields: [columnBoardId], references: [id], onDelete: Cascade)
  updatedAt     DateTime    @updatedAt @map("update_at")
  createdAt     DateTime    @default(now()) @map("created_at")

  @@map("items_column")
}

model Pet {
  id        String   @id @default(cuid())
  name      String
  ownerId   String
  photo     String
  owner     User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("update_at")
  likesBy   User[]   @relation("likesPet")
}

model Congrat {
  id          String      @id @default(cuid())
  message     String
  typeCongrat TypeCongrat @default(THANKS)
  author      User        @relation("congratCreate", fields: [authorId], references: [id])
  authorId    String
  from        User        @relation("congratReceive", fields: [fromId], references: [id])
  fromId      String
  isAnonymous Boolean     @default(false)
  createdAt   DateTime    @default(now()) @map("created_at")
}

enum TypeCongrat {
  THANKS
  CRACK
  GOOD_JOB
  SIUU
}

model PostCreative {
  id         String    @id @default(cuid())
  title      String
  content    String
  image      String
  author     User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId   String
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("update_at")
  Category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?
}

model Category {
  id        String         @id @default(cuid())
  name      String
  createdAt DateTime       @default(now()) @map("created_at")
  updatedAt DateTime       @updatedAt @map("update_at")
  posts     PostCreative[]
}

model AmorAmistad {
  id       String @id @default(cuid())
  friendId String
  loveId   String
  message  String @default("")
}
